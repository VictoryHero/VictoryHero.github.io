<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2020/03/05/YaCy--A%20Free%20Try/"/>
    <url>/2020/03/05/YaCy--A%20Free%20Try/</url>
    
    <content type="html"><![CDATA[<p>安装最新的java环境</p><pre><code class="shell">dnf install -y java-latest-openjdk</code></pre><p>下载YaCy的LinuxTarball</p><pre><code class="shell">wget http://latest.yacy.net/yacy_v1.922_20191013_9964.tar.gz</code></pre><p>解压文件到/opt目录下</p><pre><code class="shell">tar --extract --file yacy_v1.922_20191013_9964.tar.gz --directory /opt</code></pre><p>运行YaCy</p><pre><code>source /opt/startYACY.sh</code></pre><p>Success as this:<br><img src="https://img-blog.csdnimg.cn/20200304163821709.png" alt="在这里插入图片描述">Try it!</p>]]></content>
    
    
    <categories>
      
      <category>技术尝鲜</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS8</tag>
      
      <tag>YaCy</tag>
      
      <tag>P2P</tag>
      
      <tag>搜索引擎</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2020/03/03/Ubuntu18%E5%AE%89%E8%A3%85NCL6.6/"/>
    <url>/2020/03/03/Ubuntu18%E5%AE%89%E8%A3%85NCL6.6/</url>
    
    <content type="html"><![CDATA[<blockquote><p>继NCL更新到6.6以后,官网给出了很方便的conda安装，<a href="http://www.ncl.ucar.edu/Download/conda.shtml">详见官网教程</a><br>在这里，笔者整理了一下自己的安装思路。<br>根据官网的推荐，我们选择了minconda而不是Anaconda（小巧够用）</p></blockquote><h2 id="1-安装Minconda"><a href="#1-安装Minconda" class="headerlink" title="1.安装Minconda"></a>1.安装Minconda</h2><h4 id="1-1下载脚本"><a href="#1-1下载脚本" class="headerlink" title="1.1下载脚本"></a>1.1下载脚本</h4><p>从中科大的源站下载minconda安装脚本，并执行。</p><pre><code class="shell">wget https://mirrors.tuna.tsinghua.edu.cn/anaconda/miniconda/Miniconda3-4.5.11-Linux-x86_64.shchmod +x Miniconda3-4.5.11-Linux-x86_64.sh./Miniconda3-4.5.11-Linux-x86_64.sh </code></pre><p>脚本执行后，会有一系列交互，提示你设置环境变量、安装位置等等，如果你不想做决定，懒人办法是:回车确认后，阅读条例后按q 第一个出现的选yes 之后统统回车用默认值</p><h4 id="1-2配置环境变量"><a href="#1-2配置环境变量" class="headerlink" title="1.2配置环境变量"></a>1.2配置环境变量</h4><pre><code class="shell">$vim .bashrc#文件末尾写入export PATH=/home/lb/miniconda3/bin:$PATH#:wq保存退出$source .bashrc</code></pre><h4 id="1-3查看版本"><a href="#1-3查看版本" class="headerlink" title="1.3查看版本"></a>1.3查看版本</h4><pre><code class="shell">$conda -v </code></pre><h2 id="2-安装NCL"><a href="#2-安装NCL" class="headerlink" title="2.安装NCL"></a>2.安装NCL</h2><p>使用conda安装，这将是个漫长的过程</p><pre><code class="shell">$conda create -n ncl_stable -c conda-forge ncl</code></pre><p>等上面步骤结束后，按照提示激活环境</p><pre><code class="shell">$source activate ncl_stable</code></pre><p>试着跑一份代码，正常得到图形结果，说明安装成功。<br><img src="https://img-blog.csdnimg.cn/20200303180831758.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2wxMTc1ODMyMzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">)<img src="https://img-blog.csdnimg.cn/20200303181222377.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2wxMTc1ODMyMzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-使用ncl"><a href="#3-使用ncl" class="headerlink" title="3.使用ncl"></a>3.使用ncl</h2><p>此后每次在终端中使用时:</p><pre><code class="shell">##激活环境$source activate ncl_stable##关闭环境$source deactivate </code></pre>]]></content>
    
    
    <categories>
      
      <category>经验整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>NCL</tag>
      
      <tag>Ubuntu</tag>
      
      <tag>conda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2020/03/02/Centos8%E5%AE%89%E8%A3%85Cockpit----%E8%BF%90%E7%BB%B4%E5%96%8A%E4%BD%A0%E5%BC%80%E9%A3%9E%E6%9C%BA/"/>
    <url>/2020/03/02/Centos8%E5%AE%89%E8%A3%85Cockpit----%E8%BF%90%E7%BB%B4%E5%96%8A%E4%BD%A0%E5%BC%80%E9%A3%9E%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<blockquote><p>Cockpit是一个Web控制台，具有易于使用的基于Web的界面，使您可以在服务器上执行管理任务。它也是一个Web控制台，它意味着您也可以通过移动设备访问它。它可以执行多种任务:</p><ul><li>管理服务</li><li>管理用户帐号</li><li>管理和监视系统服务</li><li>配置网络接口和防火墙</li><li>查看系统日志</li><li>管理虚拟机</li><li>创建诊断报告</li><li>设置内核转储配置</li><li>配置SELinux</li><li>更新软件</li><li>管理系统订阅</li></ul></blockquote><p>RHEL8系列集成了Cockpit，除了可以在web中管理、检测Liunx主机以外，不得不说的是还可以通过Cockpit管理台在web中登陆ssh终端哦！笔者迫不及待地去玩耍了一番。<br>cockpit默认监听<strong>9090</strong>端口，记得在安全规则里提前开放哦！<br>如果有运行firewall-cmd 可以执行如下，开放9090端口</p><pre><code class="shell">firewall-cmd --add-service=cockpit --permanentfirewall-cmd --reload</code></pre><pre><code class="shell">systemctl enable --now cockpit.socket     #配置开机启动cockpit服务，并现在开启lsof -i:9090                            #查看9090端口当前的监听者</code></pre><p>登陆浏览器，键入 公网地址:9090 并回车<br>此时浏览器多会提示证书风险，可以选择高级-&gt;继续访问</p><blockquote><p>控制台是从/etc/cockpit/ws-certs.d下调用证书的 如果没有安装正规机构颁发的证书，将默认采用自签发证书，故而会被风险警告</p></blockquote><p>接着，便会进入一个登陆界面:<br><img src="https://img-blog.csdnimg.cn/20200304132716355.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2wxMTc1ODMyMzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>输入账号密码登陆以后，进入系统管理界面:<br><img src="https://img-blog.csdnimg.cn/20200304132744774.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2wxMTc1ODMyMzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>用cockpit管理主机对运维相当友好哦！<br>介于管理系统暴露在公网下风险较大，可以尝试修改监听端口、日常停用服务只在使用时开启等。</p>]]></content>
    
    
    <categories>
      
      <category>技术尝鲜</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS8</tag>
      
      <tag>Cockpit</tag>
      
      <tag>运维</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2020/02/06/%E5%9C%A8Centos8%E4%B8%8A%E9%83%A8%E7%BD%B2Django%E7%8E%AF%E5%A2%83(Nginx+mysql+uwsgi)/"/>
    <url>/2020/02/06/%E5%9C%A8Centos8%E4%B8%8A%E9%83%A8%E7%BD%B2Django%E7%8E%AF%E5%A2%83(Nginx+mysql+uwsgi)/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前言:笔者通过阿里云的学生”<a href="https://developer.aliyun.com/adc/student/#ecscolleges-collocation-stu">在家实践计划</a>“获得了一台2核4G的云ECS实例，并安装了Centos8镜像。于是尝试部署一套Django的生产环境。笔者选择了  Nginx + uwsgi + mysql +Python3的方式。主机自带了python3和pip3。笔者自行安装了剩下的部分。其中，mysql的安装借鉴了这篇<a href="https://blog.csdn.net/qq_43232506/article/details/102816659">参考博文</a>。如有疑问欢迎大家在评区留言。<br>附言:以下操作，笔者都是以root身份进行的，读者以其他用户进行时，请酌情在命令前加上sudo。</p></blockquote><h2 id="1-Nginx"><a href="#1-Nginx" class="headerlink" title="1.Nginx"></a>1.Nginx</h2><h5 id="1-1阿里云放通80端口"><a href="#1-1阿里云放通80端口" class="headerlink" title="1.1阿里云放通80端口"></a>1.1阿里云放通80端口</h5><p>在阿里云的控制台中，对实例主机配置安全组，在入方向新增80端口的安全规则。配置如有疑问请参考<a href="https://help.aliyun.com/document_detail/25475.html?spm=5176.2020520101.121.1.57bb4df5DMKEqy">官方说明</a>。</p><h5 id="1-2安装nginx"><a href="#1-2安装nginx" class="headerlink" title="1.2安装nginx"></a>1.2安装nginx</h5><p>由于笔者对nginx的版本没有过多要求，此处采用dnf包管理方式安装，此处笔者dnf安装的是14.1版本。</p><pre><code class="shell">dnf install -y nginx</code></pre><p>安装完成后，可以查看一下版本，以验证是否正确安装。</p><pre><code class="shell">nginx -v</code></pre><h5 id="1-3nginx管理"><a href="#1-3nginx管理" class="headerlink" title="1.3nginx管理"></a>1.3nginx管理</h5><p>基于dnf安装的nginx已经做好了相关设置，可以使用nginx -s、systemctl对nginx进行便捷管理。<br>systemctl管理常用:</p><pre><code class="shell">systemctl enable nginx #开机自启动nginxsystemctl disable nginx #开机禁止启动nginxsystemctl status nginx #查看nginx服务状态systemctl start nginx #开启nginx服务systemctl stop nginx #终止nginx服务systemctl restart nginx #重启nginx服务 </code></pre><p>相比之下，笔者还是更喜欢直接使用原生的nginx自带命令<br>通过nginx -h 读者可以查看到nginx常用命令及说明，笔者摘录了一部分</p><pre><code class="shell">nginx -V             #查看nginx版本和配置项内容nginx -t              #检查配置文件是否正确nginx -c  配置文件路径 #选用某一配置文件nginx                  #启动nginxnginx -s reload      #重新载入配置文件nginx -s stop         #停止nginx</code></pre><h5 id="1-4nginx使用"><a href="#1-4nginx使用" class="headerlink" title="1.4nginx使用"></a>1.4nginx使用</h5><pre><code class="shell">systemctl start nginx #或者直接使用nginx 启动nginx服务systemctl status nginx #若看到Active变为active(running)则启动正常lsof -i:80            #可以看到80端口已经被nginx监听了</code></pre><p>上面一系列检查确认nginx正常启动后，可以到浏览器输入公网地址或域名，看到nginx欢迎页。<br>nginx默认配置中监听80端口的配置项所在根位置，对应nginx程序安装目录下的html目录。我们通过<code>nginx -V</code>可以看到，dnf安装后，nginx安装位置在/usr/share/nginx,配置文件在/etc/nginx/nginx.conf。(欢迎页就是/usr/share/nginx/html/index.html)。<br>笔者还是更习惯将网站目录设置在/var/www下，我们可以这样来修改:</p><pre><code class="shell">mkdir -p /var/www/mysite                      #创建网站目录cp /usr/share/nginx/html/* /var/www/mysite/   #笔者暂时没网站,先用默认cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak #备份配置文件vim /etc/nginx/nginx.conf                        #打开配置文件 按i编辑##找到其中http-&gt;listen80的server项-&gt;修改root为/var/www/mysite;##按ESC后输入:wq 保存退出nginx -t                        #测试配置文件是否修改正确nginx -s relod                     #无误后重新载入配置文件</code></pre><p>大功告成，网站目录修改成功。(准确说是80端口web内容映射的根目录位置)</p><h2 id="2-Mysql"><a href="#2-Mysql" class="headerlink" title="2.Mysql"></a>2.Mysql</h2><h5 id="2-1安装mysql8-0"><a href="#2-1安装mysql8-0" class="headerlink" title="2.1安装mysql8.0"></a>2.1安装mysql8.0</h5><p>Centos8的dnf对懒人那是相当友好。mysql8.0的完全可以一条命令解决:</p><pre><code class="shell">dnf install -y @mysql  #@mysql模块将安装MySQL8.0及其所有依赖项</code></pre><h5 id="2-2启动mysql"><a href="#2-2启动mysql" class="headerlink" title="2.2启动mysql"></a>2.2启动mysql</h5><pre><code class="shell">systemctl enable mysqld   #配置mysql开机自启动systemctl start mysqld       #启动mysqldsystemctl status mysqld   #查看mysql是否启动成功(active running)</code></pre><h5 id="2-3安全设置"><a href="#2-3安全设置" class="headerlink" title="2.3安全设置"></a>2.3安全设置</h5><p>运行如下脚本，可以设置mysql的root密码，并引导你完成一些必要的安全设置。</p><pre><code class="shell">mysql_secure_installation</code></pre><p>首先，脚本会让你选择是否配置VALIDATE PASSWORD PLUGIN(密码验证插件)，该插件用来检查mysql用户所设置的密码强度，只有达到一定强度的密码才允许被设置。如果你希望设置请输入y或者Y回车，不想请直接回车。若选择了配置，紧接着你将选择所采用密码验证策略的级别：</p><blockquote><p>低:密码长度不少于8位<br>中:密码长度不少于8位，必须是数字、大小写字母、特殊字母混合。<br>强:密码长度不少于8位，必须是数字、大小写字母、特殊字母混合，需配合字典文件。</p></blockquote><p>通常，我们选择中级别即可。</p><p>其次，将要求用户输入两次为root设置的新密码，上一步骤设置的密码验证策略将发挥作用，并对用户设置的密码强度进行打分。设置好密码以后，会提示用户是否继续采用密码保护，选择y回车。</p><p>紧接着，将询问用户是否删除匿名用户，选择y回车。</p><blockquote><p>默认情况下，MySQL有一个匿名用户，允许任何人登录MySQL，而不必创建用户帐户。这仅用于测试，或者安装时更便利。但在部署生产环境之前，应该先删除匿名用户。</p></blockquote><p>然后，将询问用户是否禁止以root身份远程登陆mysql，选择y回车。</p><blockquote><p>通常，mysql中的root用户应只允许通过本地登陆，而不能远程登陆。这样可以降低root用户密码被爆破的风险。</p></blockquote><p>此后，将询问用户是否删除测试数据库，选择y回车。</p><blockquote><p>默认情况下，MySQL总有一个名为’test’的数据库，允许任何用户访问。这仅用于安装时的测试，但在部署生产环境之前，应该先删除该数据库。</p></blockquote><p>最后，脚本询问用户是否现在重载 privilege tables，以使当前所有修改立刻生效。选择y回车。</p><p>当我们在终端中键入:</p><pre><code class="shell">mysql -uroot -p             #回车输入密码并确认</code></pre><p>即可登陆mysql。</p><h2 id="3-Django"><a href="#3-Django" class="headerlink" title="3.Django"></a>3.Django</h2><p>Django作为python得力的重量级web框架，一直备受青睐。</p><h5 id="3-1安装django"><a href="#3-1安装django" class="headerlink" title="3.1安装django"></a>3.1安装django</h5><pre><code class="shell">pip3 install django</code></pre><h5 id="3-2关联mysql"><a href="#3-2关联mysql" class="headerlink" title="3.2关联mysql"></a>3.2关联mysql</h5><pre><code class="shell">dnf install mysql-develpip3 install mysqlclient</code></pre><h5 id="3-3Django项目"><a href="#3-3Django项目" class="headerlink" title="3.3Django项目"></a>3.3Django项目</h5><pre><code class="shell">django-admin startproject  myproject   #创建一个名为myproject的项目cd myprojectpython3 manage.py startapp dg_mypr  #创建一个应用dg_mypr用来映射数据库</code></pre><p>上述创建的应用，通过在models.py中利用Django的ORM映射数据库的表和字段，一般为了统一我们会使该应用与数据库同名。</p><p>打开项目下的配置文件settings.py</p><pre><code class="python">DATABASES = &#123;    &#39;default&#39;: &#123;        &#39;ENGINE&#39;: &#39;django.db.backends.sqlite3&#39;,        &#39;NAME&#39;: os.path.join(BASE_DIR, &#39;db.sqlite3&#39;),    &#125;&#125;#上述内容修改为mysql引擎，填入要连接的数据库信息#要注意的是 这里的数据库必须是提前创建好的！！！！！DATABASES = &#123;    &#39;default&#39;: &#123;        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,        &#39;NAME&#39;: &#39;数据库名&#39;,        &#39;USER&#39;: &#39;root&#39;,        &#39;PASSWORD&#39;: &#39;密码&#39;,        &#39;HOST&#39;: &#39;localhost&#39;,    &#125;&#125;</code></pre><pre><code class="py">#在这里插入新创建的appINSTALLED_APPS = [    &#39;django.contrib.admin&#39;,    &#39;django.contrib.auth&#39;,    &#39;django.contrib.contenttypes&#39;,    &#39;django.contrib.sessions&#39;,    &#39;django.contrib.messages&#39;,    &#39;django.contrib.staticfiles&#39;,    &#39;dg_mypr&#39;,                        #加入dg_mypr]</code></pre><pre><code class="py">DEBUG = True            #测试中打开Debug 生产环境请关闭ALLOWED_HOSTS = [u&#39;*&#39;]    #修改白名单为全通</code></pre><p>修改完成后，保存退出。<br>(在dg_mypr中的models.py中定义ORM映射模型的步骤略)<br>改好配置文件并创建模型后，我们可以使用</p><pre><code class="shell">python3 manage.py check           #确认正常连接数据库且语法正确(0 issues)python3 manage.py makemigrations  #根据模型建立migrationpython3 manage.py migrate          #根据migration在数据库中建立对应的表</code></pre><p>此后若需要应用新的ORM建模，可以在清库后，删除dg_mypr/migrations目录下的<strong>pycache</strong>和0001_initial.py，重复上述两步操作即可。<br>最后，我们可以在开着debug的情况下应用runserver跑一个端口测试一下:<br>(确保阿里云安全策略组已开放该端口)</p><pre><code class="shell">python3 manage.py runserver 0.0.0.0:8080  #监听8080端口建立项目服务</code></pre><p>当浏览器访问http://公网地址:端口 后，若载入了Django欢迎页，则进入下一步骤。</p><h2 id="4-uWSGI"><a href="#4-uWSGI" class="headerlink" title="4.uWSGI"></a>4.uWSGI</h2><h5 id="4-1安装uwsgi"><a href="#4-1安装uwsgi" class="headerlink" title="4.1安装uwsgi"></a>4.1安装uwsgi</h5><pre><code class="shell">python3 -m pip install uwsgi#安装完成后测试一下uwsgi --version</code></pre><h5 id="4-2写项目配置文件"><a href="#4-2写项目配置文件" class="headerlink" title="4.2写项目配置文件"></a>4.2写项目配置文件</h5><p>在项目的目录 /var/www/mysite/myproject 下创建一个ini配置文件<br>并创建一个目录uwsgi用来存放运行相关文件 </p><pre><code class="shell">touch myproject.inimkdir uwsgi</code></pre><p>在myproject.ini中写入:</p><pre><code class="py"># myproject.ini [uwsgi]#内部转发端口 只要不被占用可随意找 需和nginx.conf里的转发口匹配socket = :8888    #django 项目目录chdir           = /var/www/mysite/myproject#Django 项目下 wsgi.py 文件module          = myproject.wsgimaster          = true#进程数processes       = 4vacuum          = true#status文件，可以查看uwsgi的运行状态stats           =%(chdir)/uwsgi/uwsgi.status#pid文件，通过该文件可以控制uwsgi的重启和停止pidfile         =%(chdir)/uwsgi/uwsgi.pid#日志文件，通过该文件查看uwsgi的日志daemonize       =%(chdir)/uwsgi/uwsgi.log</code></pre><h5 id="4-3写nginx配置文件"><a href="#4-3写nginx配置文件" class="headerlink" title="4.3写nginx配置文件"></a>4.3写nginx配置文件</h5><p>在nginx配置文件nginx.conf中加入</p><pre><code class="py">server &#123;    listen 8080; #暴露给外部访问的端口 根据实际指定 确认阿里云策略组已放行    server_name localhost;      charset utf-8;    location / &#123;   include uwsgi_params;    uwsgi_pass 127.0.0.1:8888; #外部访问端口就转发到内部端口 要与项目配置文件里的一致    &#125;    location /static/ &#123;        alias /var/www/mysite/myproject/static/; #项目静态路径设置    &#125;&#125;</code></pre><p>写完后运行 <code>nginx -t</code>检测一下是否有语法错误<br>然后运行<code>nginx -s reload</code>重新载入配置文件</p><h5 id="4-4运行"><a href="#4-4运行" class="headerlink" title="4.4运行"></a>4.4运行</h5><p>回到项目目录 运行 <code>uwsgi --ini myproject.ini</code>即可<br>可运行<code>cat uwsgi/uwsgi.log</code>查看一下是否正常启动了uwsgi<br>当看到如下内容 说明正常启动了</p><pre><code class="shell">*** uWSGI is running in multiple interpreter mode ***spawned uWSGI master process (pid: 1405)spawned uWSGI worker 1 (pid: 1413, cores: 1)spawned uWSGI worker 2 (pid: 1414, cores: 1)spawned uWSGI worker 3 (pid: 1415, cores: 1)spawned uWSGI worker 4 (pid: 1416, cores: 1)</code></pre><p>此时，运行<code>ps aux | grep uwsgi</code>可查看到正在运行的uwsgi实例</p><h5 id="4-5管理"><a href="#4-5管理" class="headerlink" title="4.5管理"></a>4.5管理</h5><p>倘若不撰写管理脚本 需要重启uwsgi时总是需要</p><pre><code class="shell">$ ps -ax | grep uwsgi$ kill -9 [pid]$ uwsgi --ini myproject.ini</code></pre><p>但是如果你按照第二步创建了uwsgi目录及相关文件，你就可以优雅地管理uwsgi进程。</p><h6 id="4-5-1安装uwsgitop"><a href="#4-5-1安装uwsgitop" class="headerlink" title="4.5.1安装uwsgitop"></a>4.5.1安装uwsgitop</h6><p>uwsgitop是一款界面类似top的工具，用以查看指定uwsgi的全部工作进程情况。</p><pre><code class="shell"> pip3 install uwsgitop</code></pre><h6 id="4-5-2管理相关命令"><a href="#4-5-2管理相关命令" class="headerlink" title="4.5.2管理相关命令"></a>4.5.2管理相关命令</h6><pre><code class="shell">#重启uwsgi(常常出错 还是执行stop以后start效率高)uwsgi --reload uwsgi/uwsgi.pid#终止uwsgi(原理是启动uwsgi进程时会把pid写入该文件)uwsgi --stop uwsgi/uwsgi.pid#查看uwsgi各进程工作状况uwsgitop uwsgi/uwsgi.status#追踪uwsgi日志及动态刷新当前访问记录tail -f uwsgi/uwsgi.log#启动uwsgiuwsgi --ini myproject.ini</code></pre><p>如果不便记忆，可将上述命令写入sh脚本文件 快捷执行。</p><pre><code class="shell">cd uwsgiecho &quot;uwsgi --ini ../myproject.ini&quot; &gt;start.shecho &quot;uwsgi --stop uwsgi.pid&quot; &gt;stop.shecho &quot;uwsgitop uwsgi.status&quot; &gt;status.shecho &quot;tail -f uwsgi.log&quot;&gt;log.shchmod +x *.sh</code></pre><p>可在浏览器访问项目地址,测试效果。</p><p>综上，笔者整理了自己部署环境的全过程，希望能够对读者有所帮助。后续如有其他内容，将继续补丁修正。欢迎评论指正！</p>]]></content>
    
    
    <categories>
      
      <category>经验整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>CentOS8</tag>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2020/02/04/Centos8%E4%BD%BF%E7%94%A8yum_dnf%E5%87%BA%E7%8E%B0Error_%20Failed%20to%20synchronize%20cache%20for%20repo/"/>
    <url>/2020/02/04/Centos8%E4%BD%BF%E7%94%A8yum_dnf%E5%87%BA%E7%8E%B0Error_%20Failed%20to%20synchronize%20cache%20for%20repo/</url>
    
    <content type="html"><![CDATA[<p>﻿## 问题描述</p><pre><code class="shell">$ yum install xxx$ Error: Failed to synchronize cache for repo </code></pre><pre><code class="shell">$ dnf install xxx$ Error: Failed to synchronize cache for repo </code></pre><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><pre><code class="shell">$ cd /etc/yum.repos.d#之后 查找并删除出现问题的 repo仓库#若未找到 则打开 CentOS-Base.repo找$ yum clean all$ yum makecache#dnf也像上边一样即可</code></pre><h2 id="出现问题的原因"><a href="#出现问题的原因" class="headerlink" title="出现问题的原因"></a>出现问题的原因</h2><h4 id="1-该源已经失效"><a href="#1-该源已经失效" class="headerlink" title="1.该源已经失效"></a>1.该源已经失效</h4><h4 id="2-该源当前网络不可达（俗称-qiang掉）"><a href="#2-该源当前网络不可达（俗称-qiang掉）" class="headerlink" title="2.该源当前网络不可达（俗称 qiang掉）"></a>2.该源当前网络不可达（俗称 qiang掉）</h4><h4 id="3-该源同当前系统版本不符合"><a href="#3-该源同当前系统版本不符合" class="headerlink" title="3.该源同当前系统版本不符合"></a>3.该源同当前系统版本不符合</h4>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Centos8</tag>
      
      <tag>dnf</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2020/01/12/Django2.x%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/"/>
    <url>/2020/01/12/Django2.x%E5%AE%9E%E7%8E%B0%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<p>﻿## 1.使用pip安装django的Cros模块</p><pre><code class="shell">pip3 install django-cors-headers</code></pre><h2 id="2-修改Django项目的Settings-py"><a href="#2-修改Django项目的Settings-py" class="headerlink" title="2.修改Django项目的Settings.py"></a>2.修改Django项目的Settings.py</h2><pre><code class="python">#注册appINSTALLED_APPS = [    ...    &#39;corsheaders&#39;，#增加    ... ] # 添加中间件MIDDLEWARE = [...    &#39;corsheaders.middleware.CorsMiddleware&#39;,# 新增... ]##跨域的配置#尤其注意允许访问的域名白名单 和开启CORS_ORIGIN_ALLOW_ALL 二选一 不要全设置#CORS_ORIGIN_WHITELIST 中的域名请携带协议名称CORS_ORIGIN_WHITELIST = (                &#39;*&#39;)CORS_ORIGIN_ALLOW_ALL = True#允许跨域请求的请求方法类型CORS_ALLOW_METHODS = (    &#39;DELETE&#39;,    &#39;GET&#39;,    &#39;OPTIONS&#39;,    &#39;PATCH&#39;,    &#39;POST&#39;,    &#39;PUT&#39;,    &#39;VIEW&#39;,)#允许跨域请求的请求头类型CORS_ALLOW_HEADERS = (    &#39;XMLHttpRequest&#39;,    &#39;X_FILENAME&#39;,    &#39;accept-encoding&#39;,    &#39;authorization&#39;,    &#39;content-type&#39;,    &#39;dnt&#39;,    &#39;origin&#39;,    &#39;user-agent&#39;,    &#39;x-csrftoken&#39;,    &#39;x-requested-with&#39;,)#开启后允许cookie传递 必备CORS_ALLOW_CREDENTIALS = True    #云服务器部署时候请务必打开ALLOWED_HOSTS = [u&#39;*&#39;]</code></pre><h2 id="3-检测配置"><a href="#3-检测配置" class="headerlink" title="3.检测配置"></a>3.检测配置</h2><pre><code class="shell">python3 manage.py check   #无报错即配置正常</code></pre>]]></content>
    
    
    <categories>
      
      <category>经验整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
      <tag>跨域</tag>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2019/12/13/%E8%AE%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%87%BA%E7%8E%B0ssl%20hand%20shake%20error%E7%9A%84%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/"/>
    <url>/2019/12/13/%E8%AE%B0%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%87%BA%E7%8E%B0ssl%20hand%20shake%20error%E7%9A%84%E8%A7%A3%E5%86%B3%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<p>﻿#### 问题描述：</p><p>在服务器上重新部署ssl证书以后，浏览器访问、小程序PC端调试均无问题。但在移动端测试以及线上demo均出现了”ssl hand shake error”错误。疑似证书不被认可。</p><h4 id="解决思路："><a href="#解决思路：" class="headerlink" title="解决思路："></a>解决思路：</h4><p>1.前往该网站检测服务器证书的安装情况 <a href="https://www.myssl.cn/tools/check-server-cert.html">https://www.myssl.cn/tools/check-server-cert.html</a><br>2.查看根证书、中间件是否正常。发现检测报告提示<strong>找不到中间件</strong><br>3.前往该网站生成中间件<a href="https://www.myssl.cn/tools/downloadchain.html">https://www.myssl.cn/tools/downloadchain.html</a><br>4.进入网站后输入证书文件内容，点击下一步，即可跳转到中间件下载页面，下载后上传至服务器。<br>5.笔者的服务器部署apache, 故而在/etc/httpd/conf.d/ssl.conf中加入</p><pre><code class="shell">SSLCertificateChainFile  ssl/server.chain  #证书存放位置为/etc/httpd/ssl/</code></pre><p>6.保存配置文件后，运行apachectl configtest 确认配置无误后，重启apache</p><p>内容参考:<a href="https://www.jianshu.com/p/9f825044a0df">https://www.jianshu.com/p/9f825044a0df</a></p>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>微信小程序</tag>
      
      <tag>ssl</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2019/12/01/Git%E5%9C%A8Pull%E6%97%B6%E5%87%BA%E7%8E%B0fatal_OpenSSL%20SSL_connect_SSL_ERROR_SYSCALL%20in%20connection%20to%20gitee.com_443/"/>
    <url>/2019/12/01/Git%E5%9C%A8Pull%E6%97%B6%E5%87%BA%E7%8E%B0fatal_OpenSSL%20SSL_connect_SSL_ERROR_SYSCALL%20in%20connection%20to%20gitee.com_443/</url>
    
    <content type="html"><![CDATA[<p>﻿#### 问题描述</p><p>之前顺利克隆下的仓库，某天在执行pull时候出现如下错误:<br><strong>fatal: unable to access ‘<a href="https://gitee.com/xiaoming/xiaoming.git/&#39;">https://gitee.com/xiaoming/xiaoming.git/&#39;</a>: OpenSSL SSL_connect: SSL_ERROR_SYSCALL in connection to gitee.com:443</strong></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>在Linux的Shell中 或者在Win下的GitBash中，键入如下即可</p><pre><code class="shell">env GIT_SSL_NO_VERIFY=true</code></pre>]]></content>
    
    
    <categories>
      
      <category>问题记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2019/11/30/Git%E6%8F%90%E4%BA%A4%E8%AE%B0%E4%BD%8F%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81/"/>
    <url>/2019/11/30/Git%E6%8F%90%E4%BA%A4%E8%AE%B0%E4%BD%8F%E8%B4%A6%E6%88%B7%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<p>﻿### HTTP下</p><h4 id="1-永久记住密码"><a href="#1-永久记住密码" class="headerlink" title="1.永久记住密码"></a>1.永久记住密码</h4><pre><code class="shell">git config --global credential.helper store</code></pre><p>会在用户主目录的.gitconfig文件中加入下面的配置。如果没有–global，则加在当前项目下的.git/config文件中。</p><pre><code class="c">[credential]    helper = store</code></pre><h4 id="2-临时记住密码"><a href="#2-临时记住密码" class="headerlink" title="2.临时记住密码"></a>2.临时记住密码</h4><p>采用默认的方式会记住密码15分钟</p><pre><code class="shell">git config --global credential.helper cache</code></pre><p>也可以自己指定时长（timeout单位为秒）</p><pre><code class="shell">git config --global credential.helper &#39;cache -timeout=60&#39;</code></pre><h4 id="3-录入账密"><a href="#3-录入账密" class="headerlink" title="3.录入账密"></a>3.录入账密</h4><p>执行完上述任意一步骤后 还需执行如下步骤才能记录账号密码</p><pre><code class="shell">git pull</code></pre><p>….如遇到其他情况再行补充</p>]]></content>
    
    
    <categories>
      
      <category>经验整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>开发</tag>
      
      <tag>Git</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2019/11/13/%E5%9F%BA%E4%BA%8EDosBox%E7%9A%84Inter%E6%B1%87%E7%BC%96%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    <url>/2019/11/13/%E5%9F%BA%E4%BA%8EDosBox%E7%9A%84Inter%E6%B1%87%E7%BC%96%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<blockquote><p>包含DosBox安装包和一组MASM+LINK+EDIT+DEBUG配套工具的包可在此处<a href="http://download.csdn.net/download/l1175832366/12209322">下载</a>。<br>软件配置环境:Win10  Win7_64  Win7_32   (笔者以下内容 基于Win10主流机,Win7同理)</p></blockquote><h3 id="1-创建工程目录"><a href="#1-创建工程目录" class="headerlink" title="1.创建工程目录"></a>1.创建工程目录</h3><p>在电脑上创建一个文件夹用来充当我们存放工具、代码的工程目录。<br>笔者创建的是(E:\lb)，我们将MASM文件夹放在该目录下，如图:<br><img src="https://img-blog.csdnimg.cn/20200303173948207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2wxMTc1ODMyMzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="2-安装DOSBox"><a href="#2-安装DOSBox" class="headerlink" title="2.安装DOSBox"></a>2.安装DOSBox</h3><p>双击压缩包中的DOSBox0.74-win32-installer.exe 以安装<strong>DOSBox</strong>(这是一款自带DOS的X86仿真器)安装过程中选择好安装目录然后一路Next即可，安装成功后桌面上会出现DosBox的快捷方式。<br><img src="https://img-blog.csdnimg.cn/2020030317401645.png" alt="在这里插入图片描述"></p><h3 id="3-自动挂载工作空间"><a href="#3-自动挂载工作空间" class="headerlink" title="3.自动挂载工作空间"></a>3.自动挂载工作空间</h3><p>双击打开快捷方式以后会出现两个窗口(脚本控制窗与软件窗)，如下图红圈中内容，是本机当前用户DosBox的配置文件的路径。</p><p><img src="https://img-blog.csdnimg.cn/20200303174028860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2wxMTc1ODMyMzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p> 选中该路径后，Ctrl+C复制到资源管理器中，回车(<strong>选择记事本</strong>)打开配置文件。拉至最底部，在“autoexec”配置字段下加入如下图三条命令并保存退出。  </p><p><img src="https://img-blog.csdnimg.cn/2020030317403856.png" alt="在这里插入图片描述"></p><pre><code>#[autoexec]字段下加入的命令会在DOSBox开启后自动执行，免去了每次开启都进行挂载#MOUNT C: E:\lb              #是将刚才创建的工作目录挂载到C盘(此处的C盘为虚拟盘符可自由指定) C:                            #是切换到C盘盘符PATH=C:\MASM;%PATH%            #将汇编工具目录加入环境变量PATH中</code></pre><h3 id="4-检查效果"><a href="#4-检查效果" class="headerlink" title="4.检查效果"></a>4.检查效果</h3><p>关闭DOSBox并重新打开，可以看到刚才配置的命令已经自动执行了。<br><img src="https://img-blog.csdnimg.cn/20200303174059448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2wxMTc1ODMyMzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>此时运行masm，出现如下内容，表示环境部署完成。</p><p><img src="https://img-blog.csdnimg.cn/20200303174110648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2wxMTc1ODMyMzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="5-补充"><a href="#5-补充" class="headerlink" title="5.补充"></a>5.补充</h3><p>(注：我们的之后的所有操作虽然都在软件窗口中进行，但脚本窗是不能关闭的，当它是个背景就好)</p><h5 id="5-1关于支持命令与快捷键"><a href="#5-1关于支持命令与快捷键" class="headerlink" title="5.1关于支持命令与快捷键"></a>5.1关于支持命令与快捷键</h5><p>DOSBox并非DOS，只集成了DOS中非常有限的命令中非常有限的功能，读者可根据自身需求去下载相应的exe工具并放置在配置了环境变量的目录中。</p><pre><code>help all                    查看DOSBox自身集成的命令工具exit                        退出程序Alt+Enter                     全屏/窗口 切换 （常用）Ctrl+F7                     降低跳桢数Ctrl+F8                     提高跳桢数Ctrl+F9                     强制退出DOSBOXCtrl+F10                      显示/隐藏 系统鼠标Ctrl+F11                      降低“DOS模拟CPU”速度（常用）Ctrl+F12                     提高“DOS模拟CPU”速度（常用）</code></pre><h5 id="5-2关于全屏闪退问题"><a href="#5-2关于全屏闪退问题" class="headerlink" title="5.2关于全屏闪退问题"></a>5.2关于全屏闪退问题</h5><p>部分Win10用户在使用DOSBox时，存在全屏闪退问题，笔者遇到的情况是通过以下方式解决的:</p><p>用记事本打开DOSBox配置文件(方法见第三步)</p><p>Ctrl+F 查找到” output “ 字段，如下图:</p><p><img src="https://img-blog.csdnimg.cn/20200303174129736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2wxMTc1ODMyMzY2,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>可以看到默认值是”surface” ，现在我们需要将该值改为” opengl “，如下图:</p><p><img src="https://img-blog.csdnimg.cn/20200303174155303.png" alt="在这里插入图片描述"><br>保存退出，重启DOSBox，大功告成。<br>（如果该方法不成功，还可以在oengl模式下，修改配置文件中windowresolution=1920x1080  比例可以自己定，用来设定窗口的初始大小）</p>]]></content>
    
    
    <categories>
      
      <category>经验整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Inter汇编</tag>
      
      <tag>DosBox</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2018/09/10/Centos7.3%E9%83%A8%E7%BD%B2Django%E7%8E%AF%E5%A2%83(Apache2.4+Mysql+wsgi+PHP)/"/>
    <url>/2018/09/10/Centos7.3%E9%83%A8%E7%BD%B2Django%E7%8E%AF%E5%A2%83(Apache2.4+Mysql+wsgi+PHP)/</url>
    
    <content type="html"><![CDATA[<p>以下博文记录为2018年 部分内容或老旧 仅供参考<br>接下来是笔者根据自己经历整理的从零开始在CentOs7.3上搭建环境（实测在腾讯云  阿里云主机上无误）<br>我们所采用的是如下配置：</p><pre><code>Apache2.4 + MySQL5.7+PHP7.1+phpMyAdmin4.8+python3.6(pip3) +MOD_WSGI4.5+Django2.x</code></pre><h2 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h2><h5 id="1-安装apache2-4及其扩增包"><a href="#1-安装apache2-4及其扩增包" class="headerlink" title="1.安装apache2.4及其扩增包"></a>1.安装apache2.4及其扩增包</h5><p>yum install httpd httpd-dev</p><h5 id="2-配置servername"><a href="#2-配置servername" class="headerlink" title="2.配置servername"></a>2.配置servername</h5><p>vi /etc/httpd/conf/httpd.conf<br>修改这行: ServerName localhost:80    //重要哦</p><h5 id="3-启动apache-并设置开机启动"><a href="#3-启动apache-并设置开机启动" class="headerlink" title="3.启动apache 并设置开机启动"></a>3.启动apache 并设置开机启动</h5><p>systemctl start httpd<br>chkconfig httpd on</p><h5 id="4-访问主机地址"><a href="#4-访问主机地址" class="headerlink" title="4.访问主机地址"></a>4.访问主机地址</h5><p>看一下是否运行正确（出现Test123..欢迎页面说明正确了）</p><h5 id="5-防目录泄露"><a href="#5-防目录泄露" class="headerlink" title="5.防目录泄露"></a>5.防目录泄露</h5><p>我们通常不希望自己的网站目录轻易被访问者看到或被有心人爆出。而apache默认配置中，只要没有index，就会显示网站目录，这一点我们要做一定修改<br>需要将</p><pre><code>&lt;Directory /var/www/&gt;Options Indexes FollowSymLinksAllowOverride NoneRequire all granted&lt; /Directory&gt;修改为&lt;Directory /var/www/&gt;Options FollowSymLinksAllowOverride NoneRequire all granted&lt;/ Directory&gt;</code></pre><h2 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h2><h5 id="1-安装MySQL源"><a href="#1-安装MySQL源" class="headerlink" title="1.安装MySQL源"></a>1.安装MySQL源</h5><pre><code class="shell">yum localinstall http://dev.mysql.com/get/mysql57-community-release-el7-7.noarch.rpm</code></pre><h5 id="2-安装MySQL"><a href="#2-安装MySQL" class="headerlink" title="2.安装MySQL"></a>2.安装MySQL</h5><pre><code class="shell">yum install mysql-community-server</code></pre><h5 id="3-启动MySQL"><a href="#3-启动MySQL" class="headerlink" title="3.启动MySQL"></a>3.启动MySQL</h5><pre><code class="shell">systemctl start mysqld</code></pre><h5 id="4-获取密码"><a href="#4-获取密码" class="headerlink" title="4.获取密码"></a>4.获取密码</h5><pre><code class="shell">grep &#39;temporary password&#39; /var/log/mysqld.log</code></pre><p>你会得到这行 A temporary password is generated for root@localhost: Jqqskhz1Wr(?<br>冒号后面的就是密码</p><h5 id="5-进入MySQL"><a href="#5-进入MySQL" class="headerlink" title="5.进入MySQL"></a>5.进入MySQL</h5><pre><code class="shell">mysql -uroot -p</code></pre><p>输入你刚才获得的密码，你会进入mysql&gt;</p><h5 id="6-修改密码"><a href="#6-修改密码" class="headerlink" title="6.修改密码"></a>6.修改密码</h5><p>星号为你输入的密码，不要丢了引号，密码建议大小写加数字加特殊字符，太简单的密码会被拒绝</p><pre><code class="shell">ALTER USER &#39;root&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;*************&#39;;</code></pre><h5 id="7-开放远程访问权限"><a href="#7-开放远程访问权限" class="headerlink" title="7.开放远程访问权限"></a>7.开放远程访问权限</h5><pre><code class="shell">use mysql;update user set host = &#39;%&#39; where user = &#39;root&#39;;</code></pre><p>百分号相当于*号，意为全部放行，也可改为IP地址则只允许此IP连接，也可以设置为192.168.%.%或者192.168.0.1/9代表允许一个ip段进行连接，也可以多加几条数据设置不同ip允许连接。</p><h2 id="PHP及关联配置"><a href="#PHP及关联配置" class="headerlink" title="PHP及关联配置"></a>PHP及关联配置</h2><h5 id="1-进入-usr-local文件夹"><a href="#1-进入-usr-local文件夹" class="headerlink" title="1.进入 /usr/local文件夹"></a>1.进入 /usr/local文件夹</h5><pre><code class="shell">cd /usr/local</code></pre><h5 id="2-下载php7-1-2"><a href="#2-下载php7-1-2" class="headerlink" title="2.下载php7.1.2"></a>2.下载php7.1.2</h5><pre><code class="shell">wget am1.php.net/get/php-7.1.20.tar.gz/from/this/mirror</code></pre><h5 id="3-解压下载的安装包"><a href="#3-解压下载的安装包" class="headerlink" title="3.解压下载的安装包"></a>3.解压下载的安装包</h5><p>tar -zxvf 包名<br>cd 进入解压后的文件夹</p><h5 id="4-安装必要的依赖（很重要）"><a href="#4-安装必要的依赖（很重要）" class="headerlink" title="4.安装必要的依赖（很重要）"></a>4.安装必要的依赖（很重要）</h5><pre><code class="shell">yum -y install libjpeg libjpeg-devel libpng libpng-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel curl curl-devel openssl openssl-devel</code></pre><h5 id="5-安装gcc（如果你希望之后的编译源码顺利进行的话）"><a href="#5-安装gcc（如果你希望之后的编译源码顺利进行的话）" class="headerlink" title="5.安装gcc（如果你希望之后的编译源码顺利进行的话）"></a>5.安装gcc（如果你希望之后的编译源码顺利进行的话）</h5><pre><code class="shell">yum install gcc</code></pre><h5 id="6-安装必要扩展"><a href="#6-安装必要扩展" class="headerlink" title="6.安装必要扩展"></a>6.安装必要扩展</h5><pre><code class="shell">yum -y install libxslt-devel*yum -y install perl*yum -y install httpd-devel</code></pre><h5 id="7-安装状态测试"><a href="#7-安装状态测试" class="headerlink" title="7.安装状态测试"></a>7.安装状态测试</h5><p>如果 find / -name apxs 得到的路径是:/usr/bin/apxs 那么安装很顺利</p><h5 id="8-编译前的配置"><a href="#8-编译前的配置" class="headerlink" title="8.编译前的配置"></a>8.编译前的配置</h5><pre><code class="shell">./configure --prefix=/usr/local/php7 --with-curl --with-freetype-dir --with-gd --with-gettext --with-iconv-dir --with-kerberos --with-libdir=lib64 --with-libxml-dir --with-mysqli --with-openssl --with-pcre-regex --with-pdo-mysql --with-pdo-sqlite --with-pear --with-png-dir --with-xmlrpc --with-xsl --with-zlib --enable-fpm --enable-bcmath -enable-inline-optimization --enable-gd-native-ttf --enable-mbregex --enable-mbstring --enable-opcache --enable-pcntl --enable-shmop --enable-soap --enable-sockets --enable-sysvsem --enable-xml --enable-zip --enable-pcntl --with-curl --with-fpm-user=nginx --enable-ftp --enable-session --enable-xml --with-apxs2=/usr/bin/apxs</code></pre><h5 id="9-编译并安装"><a href="#9-编译并安装" class="headerlink" title="9.编译并安装"></a>9.编译并安装</h5><pre><code class="shell">make &amp;&amp; sudo make install</code></pre><p>编译出错请查看<a href="http://www.cnblogs.com/sweetXiaoma/p/5855732.html">http://www.cnblogs.com/sweetXiaoma/p/5855732.html</a></p><h5 id="10-添加环境变量"><a href="#10-添加环境变量" class="headerlink" title="10.添加环境变量"></a>10.添加环境变量</h5><pre><code class="shell">vi /etc/profile</code></pre><p>在末尾加入</p><pre><code class="shell">PATH=$PATH:/usr/local/php7/binexport PATH</code></pre><p>使改动生效</p><pre><code class="shell">source /etc/profile</code></pre><p>查看php版本</p><pre><code class="shell">php -v</code></pre><h5 id="11-生成必要文件"><a href="#11-生成必要文件" class="headerlink" title="11.生成必要文件"></a>11.生成必要文件</h5><pre><code class="shell">cp php.ini-production /usr/local/php7/etc/php.inicp sapi/fpm/php-fpm /usr/local/php7/etc/php-fpmcp /usr/local/php7/etc/php-fpm.conf.default /usr/local/php7/etc/php-fpm.confcp /usr/local/php7/etc/php-fpm.d/www.conf.default /usr/local/php7/etc/php-fpm.d/www.conf</code></pre><h5 id="12-必要配置"><a href="#12-必要配置" class="headerlink" title="12.必要配置"></a>12.必要配置</h5><p>如果报错 请敲这行查报错信息 可以查到哪个文件第几行出错：</p><pre><code class="shell">systemctl status httpd.service</code></pre><p>（1）修改Apache默认欢迎页：</p><pre><code class="shell">vim /etc/httpd/conf.d/welcome.conf</code></pre><p>将/usr/share/httpd/noindex 修改为/var/www</p><p>（2）修改Apache配置：</p><pre><code class="shell">vim /etc/httpd/conf/httpd.conf</code></pre><p>修改DocumentRoot 为”/var/www/” （此文件中的另一处/var/www/html也改成/var/www）<br>这样我们就可以直接在/var/www下放置我们想要apache上跑起来的文件了</p><pre><code>再找到AddType application/x-compress .ZAddType application/x-gzip .gz .tgz在后面添加：AddType application/x-httpd-php .phpAddType application/x-httpd-php-source .php7</code></pre><p>（4）搜索 IfModule dir_module并在下面添加index.php （如下）</p><pre><code>&lt; IfModule dir_module&gt;DirectoryIndex index.html index.php</code></pre><p>（5）搜索有没有下面这一行：</p><pre><code>LoadModule php7_module modules/libphp7.so</code></pre><p>如果没有 请手动添加 否则 会出现运行php文件却变成文件下载<br>（6）测试<br>在www目录下创建php_info页面</p><pre><code class="shell">echo &quot;&lt;?php phpinfo();?&gt;&quot;&gt;&gt;index.php</code></pre><p>浏览器里输入 主机地址/index.php<br>出现php7.1的配置信息说明一切就绪</p><h2 id="安装phpMyadmin"><a href="#安装phpMyadmin" class="headerlink" title="安装phpMyadmin"></a>安装phpMyadmin</h2><h5 id="1-下载软件包"><a href="#1-下载软件包" class="headerlink" title="1.下载软件包"></a>1.下载软件包</h5><p>进入/var/www<br>下载最新版的phpmyadmin （如选用其他版本，可前往phpmyadmin官网查看）</p><pre><code class="shell">wget https://files.phpmyadmin.net/phpMyAdmin/4.8.2/phpMyAdmin-4.8.2-all-languages.tar.gz</code></pre><p>解压</p><pre><code class="shell">tar vzxf 包名</code></pre><p>修改解压后得到的文件夹名为phpmyadmin （为之后访问方便）</p><pre><code class="shell">mv 解压得到的文件夹/ phpmyadmin</code></pre><p>进入文件夹 </p><pre><code class="shell">cd phpmyadmin</code></pre><h5 id="2-建立主配置文件"><a href="#2-建立主配置文件" class="headerlink" title="2.建立主配置文件"></a>2.建立主配置文件</h5><pre><code class="shell">cp config.sample.inc.php config.inc.php</code></pre><h5 id="3-修改配置文件"><a href="#3-修改配置文件" class="headerlink" title="3.修改配置文件"></a>3.修改配置文件</h5><pre><code class="shell">vim config.inc.php</code></pre><pre><code>$cfg[‘blowfish_secret’] = ”; /* 自己在引号里面随便填 */ $cfg[‘Servers’][$i][‘host’] =‘127.0.0.1’  /*改成127.0.0.1*/</code></pre><h5 id="4-启动httpd-mysqld服务"><a href="#4-启动httpd-mysqld服务" class="headerlink" title="4.启动httpd+mysqld服务"></a>4.启动httpd+mysqld服务</h5><pre><code class="shell">service mysqld startservice httpd restart</code></pre><p>浏览器输入主机地址/phpmyadmin 即可登录</p><h2 id="安装python3-6及pip3"><a href="#安装python3-6及pip3" class="headerlink" title="安装python3.6及pip3"></a>安装python3.6及pip3</h2><h6 id="1-安装python3-6"><a href="#1-安装python3-6" class="headerlink" title="1.安装python3.6"></a>1.安装python3.6</h6><pre><code class="shell">yum install epel-release   #安装epel源yum install python36 python36-devel</code></pre><h5 id="2-软链接"><a href="#2-软链接" class="headerlink" title="2.软链接"></a>2.软链接</h5><p>一般来说，在/usr/bin 会有python3.6 这时我们可以设一个软链接给他</p><pre><code class="shell">ln -s /usr/bin/python3.6 python3 </code></pre><p>这样我们一运行python3即可打开python3.6</p><h5 id="3-安装3-6对应的pip3"><a href="#3-安装3-6对应的pip3" class="headerlink" title="3.安装3.6对应的pip3"></a>3.安装3.6对应的pip3</h5><p>（为防止后期pip安装时混乱，此处我们只安装pip3）</p><pre><code class="shell">yum install python36-setuptoolseasy_install-3.6 pip</code></pre><h5 id="4-安装检测"><a href="#4-安装检测" class="headerlink" title="4.安装检测"></a>4.安装检测</h5><pre><code class="shell">pip3</code></pre><p>出现各种参数说明安装成功<br>如果你还想安装pip可参考<a href="https://blog.csdn.net/zuolovefu/article/details/78142612">https://blog.csdn.net/zuolovefu/article/details/78142612</a></p><h5 id="5-模块安装"><a href="#5-模块安装" class="headerlink" title="5.模块安装"></a>5.模块安装</h5><p>关于需要用到的各种python3模块（笔者的Django 项目会用到这些，大家根据自己的需求自行安装）</p><pre><code class="shell">pip3 install djangopip3 install requestspip3 install bs4pip3 install lxmlyum install mysql-develpip3 install mysqlclient</code></pre><h2 id="安装并配置mod-wsgi"><a href="#安装并配置mod-wsgi" class="headerlink" title="安装并配置mod_wsgi"></a>安装并配置mod_wsgi</h2><h6 id="1-下载新版的wsgi"><a href="#1-下载新版的wsgi" class="headerlink" title="1.下载新版的wsgi"></a>1.下载新版的wsgi</h6><pre><code class="shell">cd 进入根目录wget https://github.com/GrahamDumpleton/mod_wsgi/archive/develop.zip</code></pre><p>解压包并进入解压得到的文件夹</p><h5 id="2-编译安装"><a href="#2-编译安装" class="headerlink" title="2.编译安装"></a>2.编译安装</h5><p>这一步configure很重要（它会列出一堆，看apxs gcc python等是否关联正确 不出现no的都是能关联到的。会有一部分是no不管他）</p><pre><code class="shell">./configure --with-python=/usr/bin/python3.6 </code></pre><pre><code class="shell">make &amp;&amp; sudo make install</code></pre><h5 id="3-在apache中加载模块"><a href="#3-在apache中加载模块" class="headerlink" title="3.在apache中加载模块"></a>3.在apache中加载模块</h5><pre><code class="shell">vim /etc/httpd/conf/httpd.conf</code></pre><p>在文件中加入</p><pre><code>LoadModule wsgi_module /usr/lib64/httpd/modules/mod_wsgi.so</code></pre><p>保存后重启阿帕奇 </p><pre><code class="shell">apachectl restart</code></pre><h2 id="关于在apache上配合mod-wsgi部署Django"><a href="#关于在apache上配合mod-wsgi部署Django" class="headerlink" title="关于在apache上配合mod_wsgi部署Django"></a>关于在apache上配合mod_wsgi部署Django</h2><h5 id="1-runserver-or-check"><a href="#1-runserver-or-check" class="headerlink" title="1.runserver or check"></a>1.runserver or check</h5><p>建议先在主机上通过runserver 或者check测试下django框架是否已经正确搭建、关联好了数据库并且本机不缺少依赖</p><pre><code class="shell">#开启8080端口 然后浏览器里 http://服务器公网ip:8080  把功能试一试python3 manage.py runserver 0.0.0.0:8080#或者check(但针对非语法错误不一定好使)python3 manage.py check</code></pre><h5 id="2-赋权限"><a href="#2-赋权限" class="headerlink" title="2.赋权限"></a>2.赋权限</h5><p>其次， 在工程文件夹外 将工程文件夹以及其子目录下文件赋予全用户读写权限</p><pre><code class="shell">chmod -R 777</code></pre><h5 id="3-修改Django-wsgi-py"><a href="#3-修改Django-wsgi-py" class="headerlink" title="3.修改Django/wsgi.py"></a>3.修改Django/wsgi.py</h5><p>修改wsgi.py 文件内容如下</p><pre><code>import osfrom django.core.wsgi import get_wsgi_applicationfrom os.path import join, dirname, abspathPROJECT_DIR = dirname(dirname(abspath(__file__)))import syssys.path.insert(0, PROJECT_DIR)os.environ.setdefault(“DJANGO_SETTINGS_MODULE”, “first.settings”)application = get_wsgi_application()</code></pre><h5 id="4-修改apache配置文件"><a href="#4-修改apache配置文件" class="headerlink" title="4.修改apache配置文件"></a>4.修改apache配置文件</h5><pre><code class="shell">vim /etc/httpd/conf/httpd.conf</code></pre><p>在文件末尾加入如下</p><pre><code>WSGIScriptAlias / /path/to/mysite.com/mysite/wsgi.pyWSGIPythonHome /path/to/venvWSGIPythonPath /path/to/mysite.com&lt;Directory /path/to/mysite.com/mysite&gt;&lt;Files wsgi.py&gt;Require all granted&lt;/Files&gt;&lt;/Directory&gt;</code></pre><p>然后保存退出，重启apache</p><p>我们来解释一下:<br>（1）第一行包含两部分 第一个地址表示apache从URL的哪开始是运行Django 第二地址是你Django 项目中wsgi.py的位置<br>（2）第二行是你所选择执行你Django程序的python解释器安装目录（如果安装wsgi时已正确指定则可省略）<br>（3）第三行是django项目的位置<br>（4）&lt;Directory 后面上Django 项目的基础配置文件所在目录（一般是和项目目录同名的子目录）<br>余下部分照常</p><p>假如我现在的主机地址为119.23.33.217 开放端口是80<br>我的Django 项目名是first     项目所在目录是/etc/Django/First/first<br>并且安装wsgi时我已经指定了python3.6（因为我的Django用的是python3）<br>我希望在浏览器中输入 119.23.33.217/wepr/xxxxx 的时候可以触发我的Django框架<br>那么我的配置文件应该这样写</p><pre><code>WSGIScriptAlias /wepr /etc/Django/First/first/first/wsgi.pyWSGIPythonPath /etc/Django/First/first&lt;Directory /etc/Django/First/first/first/&gt;&lt;Files wsgi.py&gt;Require all granted&lt;/Files&gt;&lt;/Directory&gt;</code></pre><p>××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××<br>关于WSGIScriptAlias中设置子目录的问题：<br>如果采用 WSGIScriptAlias / /etc/Django/First/first/first/wsgi.py<br>当你访问119.23.33.217时，就只能触发django，而之前配置的phpmyadmin都不能访问<br>为了合理分配服务器的区块，提高利用效率，建议专门给Django一个虚拟子目录作为“分区”<br>××××××××××××××××××××××××××××××××××××××××××××××××××××××××××××</p><p>以上属于笔者经验  如果大家在安装中出现其它问题或者发现本文疏漏 欢迎大家在下面评论</p><p>本文内容是笔者入门服务器部署时的流水账记录，二次整理到CSDN时，没有再对原内容进行修改，难免会有一些偏差认识，搬到这里来其实怀旧记录的成分更多一点。2020年RHEL8都问世好久了，LNMP部署或用容器、或用更友好的管理面板(如宝塔Linux) 笔者之后如果再遇到类似的环境重部署时，会整理一篇新的内容(文笔肯定不会这么滞涩啦 ~hh)</p><p>2020，岁月可期！</p>]]></content>
    
    
    <categories>
      
      <category>经验整理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CentOS7</tag>
      
      <tag>Django</tag>
      
      <tag>Apache</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
