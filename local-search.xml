<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>基于DosBox的Inter汇编虚拟环境部署</title>
    <link href="/2020/03/04/%E5%9F%BA%E4%BA%8EDosBox%E7%9A%84Inter%E6%B1%87%E7%BC%96%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    <url>/2020/03/04/%E5%9F%BA%E4%BA%8EDosBox%E7%9A%84Inter%E6%B1%87%E7%BC%96%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<p>包含DosBox安装包和一组MASM+LINK+EDIT+DEBUG配套工具的包可在上方链接下载。<br>软件配置环境:Win10  Win7_64  Win7_32   (笔者以下内容 基于Win10主流机,Win7同理)</p><h3 id="1-创建工程目录"><a href="#1-创建工程目录" class="headerlink" title="1.创建工程目录"></a>1.创建工程目录</h3><p>在电脑上创建一个文件夹用来充当我们存放工具、代码的工程目录。<br>笔者创建的是(E:\lb)，我们将MASM文件夹放在该目录下，如图:<br><img src="https://img-blog.csdnimg.cn/20200303173948207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2wxMTc1ODMyMzY2,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="在这里插入图片描述"></p><h3 id="2-安装DOSBox"><a href="#2-安装DOSBox" class="headerlink" title="2.安装DOSBox"></a>2.安装DOSBox</h3><p>双击压缩包中的DOSBox0.74-win32-installer.exe 以安装<strong>DOSBox</strong>(这是一款自带DOS的X86仿真器)安装过程中选择好安装目录然后一路Next即可，安装成功后桌面上会出现DosBox的快捷方式。<br><img src="https://img-blog.csdnimg.cn/2020030317401645.png" srcset="/img/loading.gif" alt="在这里插入图片描述"></p><h3 id="3-自动挂载工作空间"><a href="#3-自动挂载工作空间" class="headerlink" title="3.自动挂载工作空间"></a>3.自动挂载工作空间</h3><p>双击打开快捷方式以后会出现两个窗口(脚本控制窗与软件窗)，如下图红圈中内容，是本机当前用户DosBox的配置文件的路径。</p><p><img src="https://img-blog.csdnimg.cn/20200303174028860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2wxMTc1ODMyMzY2,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="在这里插入图片描述"></p><p> 选中该路径后，Ctrl+C复制到资源管理器中，回车(<strong>选择记事本</strong>)打开配置文件。拉至最底部，在“autoexec”配置字段下加入如下图三条命令并保存退出。  </p><p><img src="https://img-blog.csdnimg.cn/2020030317403856.png" srcset="/img/loading.gif" alt="在这里插入图片描述"></p><pre><code>#[autoexec]字段下加入的命令会在DOSBox开启后自动执行，免去了每次开启都进行挂载#MOUNT C: E:\lb              #是将刚才创建的工作目录挂载到C盘(此处的C盘为虚拟盘符可自由指定) C:                            #是切换到C盘盘符PATH=C:\MASM;%PATH%            #将汇编工具目录加入环境变量PATH中</code></pre><h3 id="4-检查效果"><a href="#4-检查效果" class="headerlink" title="4.检查效果"></a>4.检查效果</h3><p>关闭DOSBox并重新打开，可以看到刚才配置的命令已经自动执行了。<br><img src="https://img-blog.csdnimg.cn/20200303174059448.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2wxMTc1ODMyMzY2,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="在这里插入图片描述"></p><p>此时运行masm，出现如下内容，表示环境部署完成。</p><p><img src="https://img-blog.csdnimg.cn/20200303174110648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2wxMTc1ODMyMzY2,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="在这里插入图片描述"></p><h3 id="5-补充"><a href="#5-补充" class="headerlink" title="5.补充"></a>5.补充</h3><p>(注：我们的之后的所有操作虽然都在软件窗口中进行，但脚本窗是不能关闭的，当它是个背景就好)</p><h5 id="5-1关于支持命令与快捷键"><a href="#5-1关于支持命令与快捷键" class="headerlink" title="5.1关于支持命令与快捷键"></a>5.1关于支持命令与快捷键</h5><p>DOSBox并非DOS，只集成了DOS中非常有限的命令中非常有限的功能，读者可根据自身需求去下载相应的exe工具并放置在配置了环境变量的目录中。</p><pre><code>help all                    查看DOSBox自身集成的命令工具exit                        退出程序Alt+Enter                     全屏/窗口 切换 （常用）Ctrl+F7                     降低跳桢数Ctrl+F8                     提高跳桢数Ctrl+F9                     强制退出DOSBOXCtrl+F10                      显示/隐藏 系统鼠标Ctrl+F11                      降低“DOS模拟CPU”速度（常用）Ctrl+F12                     提高“DOS模拟CPU”速度（常用）</code></pre><h5 id="5-2关于全屏闪退问题"><a href="#5-2关于全屏闪退问题" class="headerlink" title="5.2关于全屏闪退问题"></a>5.2关于全屏闪退问题</h5><p>部分Win10用户在使用DOSBox时，存在全屏闪退问题，笔者遇到的情况是通过以下方式解决的:</p><p>用记事本打开DOSBox配置文件(方法见第三步)</p><p>Ctrl+F 查找到” output “ 字段，如下图:</p><p><img src="https://img-blog.csdnimg.cn/20200303174129736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2wxMTc1ODMyMzY2,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif" alt="在这里插入图片描述"></p><p>可以看到默认值是”surface” ，现在我们需要将该值改为” opengl “，如下图:</p><p><img src="https://img-blog.csdnimg.cn/20200303174155303.png" srcset="/img/loading.gif" alt="在这里插入图片描述"><br>保存退出，重启DOSBox，大功告成。<br>（如果该方法不成功，还可以在oengl模式下，修改配置文件中windowresolution=1920x1080  比例可以自己定，用来设定窗口的初始大小）</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>在Centos8上部署Django环境(Nginx+mysql+uwsgi)</title>
    <link href="/2020/03/04/%E5%9C%A8Centos8%E4%B8%8A%E9%83%A8%E7%BD%B2Django%E7%8E%AF%E5%A2%83(Nginx+mysql+uwsgi)/"/>
    <url>/2020/03/04/%E5%9C%A8Centos8%E4%B8%8A%E9%83%A8%E7%BD%B2Django%E7%8E%AF%E5%A2%83(Nginx+mysql+uwsgi)/</url>
    
    <content type="html"><![CDATA[<blockquote><p>前言:笔者通过阿里云的学生”<a href="https://developer.aliyun.com/adc/student/#ecscolleges-collocation-stu" target="_blank" rel="noopener">在家实践计划</a>“获得了一台2核4G的云ECS实例，并安装了Centos8镜像。于是尝试部署一套Django的生产环境。笔者选择了  Nginx + uwsgi + mysql +Python3的方式。主机自带了python3和pip3。笔者自行安装了剩下的部分。其中，mysql的安装借鉴了这篇<a href="https://blog.csdn.net/qq_43232506/article/details/102816659" target="_blank" rel="noopener">参考博文</a>。如有疑问欢迎大家在评区留言。<br>附言:以下操作，笔者都是以root身份进行的，读者以其他用户进行时，请酌情在命令前加上sudo。</p></blockquote><h2 id="1-Nginx"><a href="#1-Nginx" class="headerlink" title="1.Nginx"></a>1.Nginx</h2><h5 id="1-1阿里云放通80端口"><a href="#1-1阿里云放通80端口" class="headerlink" title="1.1阿里云放通80端口"></a>1.1阿里云放通80端口</h5><p>在阿里云的控制台中，对实例主机配置安全组，在入方向新增80端口的安全规则。配置如有疑问请参考<a href="https://help.aliyun.com/document_detail/25475.html?spm=5176.2020520101.121.1.57bb4df5DMKEqy" target="_blank" rel="noopener">官方说明</a>。</p><h5 id="1-2安装nginx"><a href="#1-2安装nginx" class="headerlink" title="1.2安装nginx"></a>1.2安装nginx</h5><p>由于笔者对nginx的版本没有过多要求，此处采用dnf包管理方式安装，此处笔者dnf安装的是14.1版本。</p><pre><code class="shell">dnf install -y nginx</code></pre><p>安装完成后，可以查看一下版本，以验证是否正确安装。</p><pre><code class="shell">nginx -v</code></pre><h5 id="1-3nginx管理"><a href="#1-3nginx管理" class="headerlink" title="1.3nginx管理"></a>1.3nginx管理</h5><p>基于dnf安装的nginx已经做好了相关设置，可以使用nginx -s、systemctl对nginx进行便捷管理。<br>systemctl管理常用:</p><pre><code class="shell">systemctl enable nginx #开机自启动nginxsystemctl disable nginx #开机禁止启动nginxsystemctl status nginx #查看nginx服务状态systemctl start nginx #开启nginx服务systemctl stop nginx #终止nginx服务systemctl restart nginx #重启nginx服务 </code></pre><p>相比之下，笔者还是更喜欢直接使用原生的nginx自带命令<br>通过nginx -h 读者可以查看到nginx常用命令及说明，笔者摘录了一部分</p><pre><code class="shell">nginx -V             #查看nginx版本和配置项内容nginx -t              #检查配置文件是否正确nginx -c  配置文件路径 #选用某一配置文件nginx                  #启动nginxnginx -s reload      #重新载入配置文件nginx -s stop         #停止nginx</code></pre><h5 id="1-4nginx使用"><a href="#1-4nginx使用" class="headerlink" title="1.4nginx使用"></a>1.4nginx使用</h5><pre><code class="shell">systemctl start nginx #或者直接使用nginx 启动nginx服务systemctl status nginx #若看到Active变为active(running)则启动正常lsof -i:80            #可以看到80端口已经被nginx监听了</code></pre><p>上面一系列检查确认nginx正常启动后，可以到浏览器输入公网地址或域名，看到nginx欢迎页。<br>nginx默认配置中监听80端口的配置项所在根位置，对应nginx程序安装目录下的html目录。我们通过<code>nginx -V</code>可以看到，dnf安装后，nginx安装位置在/usr/share/nginx,配置文件在/etc/nginx/nginx.conf。(欢迎页就是/usr/share/nginx/html/index.html)。<br>笔者还是更习惯将网站目录设置在/var/www下，我们可以这样来修改:</p><pre><code class="shell">mkdir -p /var/www/mysite                      #创建网站目录cp /usr/share/nginx/html/* /var/www/mysite/   #笔者暂时没网站,先用默认cp /etc/nginx/nginx.conf /etc/nginx/nginx.conf.bak #备份配置文件vim /etc/nginx/nginx.conf                        #打开配置文件 按i编辑##找到其中http-&gt;listen80的server项-&gt;修改root为/var/www/mysite;##按ESC后输入:wq 保存退出nginx -t                        #测试配置文件是否修改正确nginx -s relod                     #无误后重新载入配置文件</code></pre><p>大功告成，网站目录修改成功。(准确说是80端口web内容映射的根目录位置)</p><h2 id="2-Mysql"><a href="#2-Mysql" class="headerlink" title="2.Mysql"></a>2.Mysql</h2><h5 id="2-1安装mysql8-0"><a href="#2-1安装mysql8-0" class="headerlink" title="2.1安装mysql8.0"></a>2.1安装mysql8.0</h5><p>Centos8的dnf对懒人那是相当友好。mysql8.0的完全可以一条命令解决:</p><pre><code class="shell">dnf install -y @mysql  #@mysql模块将安装MySQL8.0及其所有依赖项</code></pre><h5 id="2-2启动mysql"><a href="#2-2启动mysql" class="headerlink" title="2.2启动mysql"></a>2.2启动mysql</h5><pre><code class="shell">systemctl enable mysqld   #配置mysql开机自启动systemctl start mysqld       #启动mysqldsystemctl status mysqld   #查看mysql是否启动成功(active running)</code></pre><h5 id="2-3安全设置"><a href="#2-3安全设置" class="headerlink" title="2.3安全设置"></a>2.3安全设置</h5><p>运行如下脚本，可以设置mysql的root密码，并引导你完成一些必要的安全设置。</p><pre><code class="shell">mysql_secure_installation</code></pre><p>首先，脚本会让你选择是否配置VALIDATE PASSWORD PLUGIN(密码验证插件)，该插件用来检查mysql用户所设置的密码强度，只有达到一定强度的密码才允许被设置。如果你希望设置请输入y或者Y回车，不想请直接回车。若选择了配置，紧接着你将选择所采用密码验证策略的级别：</p><blockquote><p>低:密码长度不少于8位<br>中:密码长度不少于8位，必须是数字、大小写字母、特殊字母混合。<br>强:密码长度不少于8位，必须是数字、大小写字母、特殊字母混合，需配合字典文件。</p></blockquote><p>通常，我们选择中级别即可。</p><p>其次，将要求用户输入两次为root设置的新密码，上一步骤设置的密码验证策略将发挥作用，并对用户设置的密码强度进行打分。设置好密码以后，会提示用户是否继续采用密码保护，选择y回车。</p><p>紧接着，将询问用户是否删除匿名用户，选择y回车。</p><blockquote><p>默认情况下，MySQL有一个匿名用户，允许任何人登录MySQL，而不必创建用户帐户。这仅用于测试，或者安装时更便利。但在部署生产环境之前，应该先删除匿名用户。</p></blockquote><p>然后，将询问用户是否禁止以root身份远程登陆mysql，选择y回车。</p><blockquote><p>通常，mysql中的root用户应只允许通过本地登陆，而不能远程登陆。这样可以降低root用户密码被爆破的风险。</p></blockquote><p>此后，将询问用户是否删除测试数据库，选择y回车。</p><blockquote><p>默认情况下，MySQL总有一个名为’test’的数据库，允许任何用户访问。这仅用于安装时的测试，但在部署生产环境之前，应该先删除该数据库。</p></blockquote><p>最后，脚本询问用户是否现在重载 privilege tables，以使当前所有修改立刻生效。选择y回车。</p><p>当我们在终端中键入:</p><pre><code class="shell">mysql -uroot -p             #回车输入密码并确认</code></pre><p>即可登陆mysql。</p><h2 id="3-Django"><a href="#3-Django" class="headerlink" title="3.Django"></a>3.Django</h2><p>Django作为python得力的重量级web框架，一直备受青睐。</p><h5 id="3-1安装django"><a href="#3-1安装django" class="headerlink" title="3.1安装django"></a>3.1安装django</h5><pre><code class="shell">pip3 install django</code></pre><h5 id="3-2关联mysql"><a href="#3-2关联mysql" class="headerlink" title="3.2关联mysql"></a>3.2关联mysql</h5><pre><code class="shell">dnf install mysql-develpip3 install mysqlclient</code></pre><h5 id="3-3Django项目"><a href="#3-3Django项目" class="headerlink" title="3.3Django项目"></a>3.3Django项目</h5><pre><code class="shell">django-admin startproject  myproject   #创建一个名为myproject的项目cd myprojectpython3 manage.py startapp dg_mypr  #创建一个应用dg_mypr用来映射数据库</code></pre><p>上述创建的应用，通过在models.py中利用Django的ORM映射数据库的表和字段，一般为了统一我们会使该应用与数据库同名。</p><p>打开项目下的配置文件settings.py</p><pre><code class="python">DATABASES = {    &#39;default&#39;: {        &#39;ENGINE&#39;: &#39;django.db.backends.sqlite3&#39;,        &#39;NAME&#39;: os.path.join(BASE_DIR, &#39;db.sqlite3&#39;),    }}#上述内容修改为mysql引擎，填入要连接的数据库信息#要注意的是 这里的数据库必须是提前创建好的！！！！！DATABASES = {    &#39;default&#39;: {        &#39;ENGINE&#39;: &#39;django.db.backends.mysql&#39;,        &#39;NAME&#39;: &#39;数据库名&#39;,        &#39;USER&#39;: &#39;root&#39;,        &#39;PASSWORD&#39;: &#39;密码&#39;,        &#39;HOST&#39;: &#39;localhost&#39;,    }}</code></pre><pre><code class="py">#在这里插入新创建的appINSTALLED_APPS = [    &#39;django.contrib.admin&#39;,    &#39;django.contrib.auth&#39;,    &#39;django.contrib.contenttypes&#39;,    &#39;django.contrib.sessions&#39;,    &#39;django.contrib.messages&#39;,    &#39;django.contrib.staticfiles&#39;,    &#39;dg_mypr&#39;,                        #加入dg_mypr]</code></pre><pre><code class="py">DEBUG = True            #测试中打开Debug 生产环境请关闭ALLOWED_HOSTS = [u&#39;*&#39;]    #修改白名单为全通</code></pre><p>修改完成后，保存退出。<br>(在dg_mypr中的models.py中定义ORM映射模型的步骤略)<br>改好配置文件并创建模型后，我们可以使用</p><pre><code class="shell">python3 manage.py check           #确认正常连接数据库且语法正确(0 issues)python3 manage.py makemigrations  #根据模型建立migrationpython3 manage.py migrate          #根据migration在数据库中建立对应的表</code></pre><p>此后若需要应用新的ORM建模，可以在清库后，删除dg_mypr/migrations目录下的<strong>pycache</strong>和0001_initial.py，重复上述两步操作即可。<br>最后，我们可以在开着debug的情况下应用runserver跑一个端口测试一下:<br>(确保阿里云安全策略组已开放该端口)</p><pre><code class="shell">python3 manage.py runserver 0.0.0.0:8080  #监听8080端口建立项目服务</code></pre><p>当浏览器访问http://公网地址:端口 后，若载入了Django欢迎页，则进入下一步骤。</p><h2 id="4-uWSGI"><a href="#4-uWSGI" class="headerlink" title="4.uWSGI"></a>4.uWSGI</h2><h5 id="4-1安装uwsgi"><a href="#4-1安装uwsgi" class="headerlink" title="4.1安装uwsgi"></a>4.1安装uwsgi</h5><pre><code class="shell">python3 -m pip install uwsgi#安装完成后测试一下uwsgi --version</code></pre><h5 id="4-2写项目配置文件"><a href="#4-2写项目配置文件" class="headerlink" title="4.2写项目配置文件"></a>4.2写项目配置文件</h5><p>在项目的目录 /var/www/mysite/myproject 下创建一个ini配置文件<br>并创建一个目录uwsgi用来存放运行相关文件 </p><pre><code class="shell">touch myproject.inimkdir uwsgi</code></pre><p>在myproject.ini中写入:</p><pre><code class="py"># myproject.ini [uwsgi]#内部转发端口 只要不被占用可随意找 需和nginx.conf里的转发口匹配socket = :8888    #django 项目目录chdir           = /var/www/mysite/myproject#Django 项目下 wsgi.py 文件module          = myproject.wsgimaster          = true#进程数processes       = 4vacuum          = true#status文件，可以查看uwsgi的运行状态stats           =%(chdir)/uwsgi/uwsgi.status#pid文件，通过该文件可以控制uwsgi的重启和停止pidfile         =%(chdir)/uwsgi/uwsgi.pid#日志文件，通过该文件查看uwsgi的日志daemonize       =%(chdir)/uwsgi/uwsgi.log</code></pre><h5 id="4-3写nginx配置文件"><a href="#4-3写nginx配置文件" class="headerlink" title="4.3写nginx配置文件"></a>4.3写nginx配置文件</h5><p>在nginx配置文件nginx.conf中加入</p><pre><code class="py">server {    listen 8080; #暴露给外部访问的端口 根据实际指定 确认阿里云策略组已放行    server_name localhost;      charset utf-8;    location / {   include uwsgi_params;    uwsgi_pass 127.0.0.1:8888; #外部访问端口就转发到内部端口 要与项目配置文件里的一致    }    location /static/ {        alias /var/www/mysite/myproject/static/; #项目静态路径设置    }}</code></pre><p>写完后运行 <code>nginx -t</code>检测一下是否有语法错误<br>然后运行<code>nginx -s reload</code>重新载入配置文件</p><h5 id="4-4运行"><a href="#4-4运行" class="headerlink" title="4.4运行"></a>4.4运行</h5><p>回到项目目录 运行 <code>uwsgi --ini myproject.ini</code>即可<br>可运行<code>cat uwsgi/uwsgi.log</code>查看一下是否正常启动了uwsgi<br>当看到如下内容 说明正常启动了</p><pre><code class="shell">*** uWSGI is running in multiple interpreter mode ***spawned uWSGI master process (pid: 1405)spawned uWSGI worker 1 (pid: 1413, cores: 1)spawned uWSGI worker 2 (pid: 1414, cores: 1)spawned uWSGI worker 3 (pid: 1415, cores: 1)spawned uWSGI worker 4 (pid: 1416, cores: 1)</code></pre><p>此时，运行<code>ps aux | grep uwsgi</code>可查看到正在运行的uwsgi实例</p><h5 id="4-5管理"><a href="#4-5管理" class="headerlink" title="4.5管理"></a>4.5管理</h5><p>倘若不撰写管理脚本 需要重启uwsgi时总是需要</p><pre><code class="shell">$ ps -ax | grep uwsgi$ kill -9 [pid]$ uwsgi --ini myproject.ini</code></pre><p>但是如果你按照第二步创建了uwsgi目录及相关文件，你就可以优雅地管理uwsgi进程。</p><h6 id="4-5-1安装uwsgitop"><a href="#4-5-1安装uwsgitop" class="headerlink" title="4.5.1安装uwsgitop"></a>4.5.1安装uwsgitop</h6><p>uwsgitop是一款界面类似top的工具，用以查看指定uwsgi的全部工作进程情况。</p><pre><code class="shell"> pip3 install uwsgitop</code></pre><h6 id="4-5-2管理相关命令"><a href="#4-5-2管理相关命令" class="headerlink" title="4.5.2管理相关命令"></a>4.5.2管理相关命令</h6><pre><code class="shell">#重启uwsgi(常常出错 还是执行stop以后start效率高)uwsgi --reload uwsgi/uwsgi.pid#终止uwsgi(原理是启动uwsgi进程时会把pid写入该文件)uwsgi --stop uwsgi/uwsgi.pid#查看uwsgi各进程工作状况uwsgitop uwsgi/uwsgi.status#追踪uwsgi日志及动态刷新当前访问记录tail -f uwsgi/uwsgi.log#启动uwsgiuwsgi --ini myproject.ini</code></pre><p>如果不便记忆，可将上述命令写入sh脚本文件 快捷执行。</p><pre><code class="shell">cd uwsgiecho &quot;uwsgi --ini ../myproject.ini&quot; &gt;start.shecho &quot;uwsgi --stop uwsgi.pid&quot; &gt;stop.shecho &quot;uwsgitop uwsgi.status&quot; &gt;status.shecho &quot;tail -f uwsgi.log&quot;&gt;log.shchmod +x *.sh</code></pre><p>可在浏览器访问项目地址,测试效果。</p><p>综上，笔者整理了自己部署环境的全过程，希望能够对读者有所帮助。后续如有其他内容，将继续补丁修正。欢迎评论指正！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/03/04/hello-world/"/>
    <url>/2020/03/04/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
